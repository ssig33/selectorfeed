# frozen_string_literal: true

require 'bundler'
Bundler.setup
Bundler.require
require 'sinatra/reloader' if development?
require 'timeout'
require 'rss'
require 'kconv'

class Article # rubocop:todo Style/Documentation
  attr_accessor :url, :title, :body

  def initialize(noko, url)
    @url = if !/^http/.match?(noko[:href])
             URI.parse(url).merge(noko[:href]).to_s
           else
             noko[:href]
           end
    @title = noko.inner_text
  end
end

class Feed # rubocop:todo Style/Documentation
  attr_accessor :key, :url, :list, :article, :title

  def initialize(url:, list:)
    @url = url
    @list = list
    fetch_title
  end

  def articles
    alice = Mechanize.new
    page = alice.get @url
    page.search(@list).map { |x| Article.new(x, @url) }
  end

  def fetch_title
    @title = Mechanize.new.get(url).search('title').text
  end
end

get '/' do
  haml :index
end

get '/feed' do
  if params[:url].empty? && params[:list].empty?
    status 404
    # rubocop:todo Layout/LineLength
    return redirect "/feed?url=#{CGI.escape('https://ascii.jp/serialarticles/132740/')}&list=#{CGI.escape('li h2 a')}"
    # rubocop:enable Layout/LineLength
  end
  x = Feed.new(url: params[:url], list: params[:list])
  if x.articles.count.zero?
    status 404
    return 'No Items Found'
  end
  rss = RSS::Maker.make('1.0') do |maker|
    maker.channel.about = ''
    maker.channel.title = x.title
    maker.channel.description = 'Generated by CSS Selector Feed'
    maker.channel.link = x.url

    x.articles.each do |a|
      item = maker.items.new_item
      item.link = a.url
      item.title = a.title
      item.description = ''
    end
  end
  content_type :xml
  rss.to_s
end
